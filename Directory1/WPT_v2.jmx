<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="WebPageTest123" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="csvCreation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1489729829000</longProp>
        <longProp name="ThreadGroup.end_time">1489729829000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="time" elementType="Argument">
              <stringProp name="Argument.name">time</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentage" elementType="Argument">
              <stringProp name="Argument.name">percentage</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="date" elementType="Argument">
              <stringProp name="Argument.name">date</stringProp>
              <stringProp name="Argument.value">${__time(dd-mmm-yyyy HHmmss)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="varEvent" elementType="Argument">
              <stringProp name="Argument.name">varEvent</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventCount" elementType="Argument">
              <stringProp name="Argument.name">eventCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="varBreakdown" elementType="Argument">
              <stringProp name="Argument.name">varBreakdown</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testname" elementType="Argument">
              <stringProp name="Argument.name">testname</stringProp>
              <stringProp name="Argument.value">${__P(testname,Default)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="testStatus" elementType="Argument">
              <stringProp name="Argument.name">testStatus</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">String test1 = &quot;1&quot;;
vars.put(&quot;varEvent&quot;,test1);
String test2 = &quot;2&quot;;
vars.put(&quot;varBreakdown&quot;,test2);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:\Reference\CSPT\Fullset_Data.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">purl,plabel,plocation,brws,pruns,pfvonly,pdomelement,pprivate,pconnections,pweb10,pscript,pblock,plogin,ppassword,pauthType,pvideo,pf,pr,pnotify,ppingback,pbwDown,pbwUp,platency,pplr,pk,ptcpdump,pnoopt,pnoimages,pnoheaders,ppngss,piq,pnoscript,pclearcerts,pmobile,pkeepua,puastring,pwidth,pheight,pbrowser_width,pbrowser_height,pdpr,pmv,pmedianMetric,pcmdline,phtmlbody,ptsview_id,pcustom,ptester,paffinity,ptimeline,ptimelineStack,pignoreSSL </stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">script.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">script</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Encoding" enabled="false">
          <stringProp name="BeanShellSampler.query">import java.net.URLEncoder; // import required class

String classification = vars.get(&quot;pscript&quot;).toString(); // obtain value of &quot;Classification&quot; variable
String encoded = URLEncoder.encode(classification,    System.getProperty(&quot;file.encoding&quot;)); // encode &quot;Classification variable and save result to &quot;encoded&quot; string
vars.put(&quot;Classification&quot;,encoded); // replace &quot;Classification&quot; variable with new value</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test Trigger" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/runtest.php?url=${purl}&amp;label=${plabel}&amp;location=${__P(location,Dulles)}:${brws}&amp;runs=${pruns}&amp;fvonly=${pfvonly}&amp;domelement=${pdomelement}&amp;private=${pprivate}&amp;connections=${pconnections}&amp;web10=${pweb10}&amp;script=${pscript}&amp;block=${pblock}&amp;login=${plogin}&amp;password=${ppassword}&amp;authType=${pauthType}&amp;video=${pvideo}&amp;f=${pf}&amp;r=${pr}&amp;notify=${pnotify}&amp;pingback=${ppingback}&amp;bwDown=${pbwDown}&amp;bwUp=${pbwUp}&amp;latency=${platency}&amp;plr=${pplr}&amp;k=${pk}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ctestID" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">testID</stringProp>
            <stringProp name="RegexExtractor.regex">www.webpagetest.org/result/(.+?)/</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1400495195">testStatus_g1</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="85068">
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ctriggerStatus" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">triggerStatus</stringProp>
            <stringProp name="RegexExtractor.regex">HTTP/1.1 (.+?) OK</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Trigger Success" enabled="true">
          <stringProp name="IfController.condition">&quot;${triggerStatus}&quot; == &quot;200&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Test Status Check" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(&quot;${testStatus_g1}&quot;.indexOf(&quot;Test Complete&quot;) == -1,)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status Check" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/testStatus.php?f=xml&amp;test=${testID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ctestStatus" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">testStatus</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;statusText&gt;(.+?)&lt;/statusText&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ctestIDs" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">testIDs</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;testId&gt;(.+?)&lt;/testId&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdateTime" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">dateTime</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;startTime&gt;(.+?)&lt;/startTime&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">60000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Test Success" enabled="true">
            <stringProp name="IfController.condition">&quot;${testStatus_g1}&quot; == &quot;Test Complete&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="XmlOut_For_Requests_Bytes" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xmlResult/${testID}/?r=12345&amp;breakdown=1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="chtmldetails" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">htmldetails</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;html&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                <stringProp name="RegexExtractor.default">not found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cjsdetails" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">jsdetails</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;js&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                <stringProp name="RegexExtractor.default">not found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCssdetails" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cssdetails</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;css&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                <stringProp name="RegexExtractor.default">not found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cimagedetails" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">imagedetails</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;image&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                <stringProp name="RegexExtractor.default">not found</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="XMLOut" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xmlResult/${testID}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="clocationName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">locationName</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;from&gt;(.+?)&amp;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cbrowser" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">browser</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;location&gt;${plocation}:(.+?)&lt;/location&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cSummaryurl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Url</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;summary&gt;(.+?)&lt;/summary&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">	</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ctestUrl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">testUrl</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;testUrl&gt;(.+?)&lt;/testUrl&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cloadTime" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">loadTime</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;loadTime&gt;(.+?)&lt;/loadTime&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfirstByte" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">firstByte</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;TTFB&gt;(.+?)&lt;/TTFB&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cstartRender" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">startRender</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;render&gt;(.+?)&lt;/render&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdocCompleteTime" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">docCompleteTime</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;docTime&gt;(.+?)&lt;/docTime&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdocCompleteRequest" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">docCompleteRequest</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;requestsDoc&gt;(.+?)&lt;/requestsDoc&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdocCompleteBytesIn" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">docCompleteBytesIn</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;bytesInDoc&gt;(.+?)&lt;/bytesInDoc&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfullyLoadTime" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">fullyLoadTime</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;fullyLoaded&gt;(.+?)&lt;/fullyLoaded&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfullyLoadReq" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">fullyLoadReq</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;requestsFull&gt;(.+?)&lt;/requestsFull&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfullyLoadBytesIn" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">fullyLoadBytesIn</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;bytesIn&gt;(.+?)&lt;/bytesIn&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cpageName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">pageName</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;title&gt;(.+?)&lt;/title&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cspeedIndex" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">speedIndex</stringProp>
                <stringProp name="RegexExtractor.regex">SpeedIndex&gt;(.+?)&lt;/SpeedIndex&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cvisuallyComplete" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">visuallyComplete</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;visualComplete&gt;(.+?)&lt;/visualComplete&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdomElement" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">domElement</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;domElements&gt;(.+?)&lt;/domElements&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="clastVisuallyChanged" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lastVisuallyChanged</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;lastVisualChange&gt;(.+?)&lt;/lastVisualChange&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CSVCreation" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
String test = &quot;https://www.webpagetest.org/video/compare.php?tests=&quot; + vars.get(&quot;testID&quot;);

vars.put(&quot;cvisualComp&quot;,test);

String test1 = &quot;Webpagetest_Desktop_&quot; + vars.get(&quot;date&quot;);
vars.put(&quot;ctestName&quot;,test1);

//StringBuilder test = new StringBuilder();
//test.append(vars.get(&quot;cvisualComp&quot;));
//test.append(vars.get(&quot;testID&quot;));
//vars.put(&quot;cvisualComp&quot;,test.toString());



File report = new File(&quot;Report.csv&quot;);

//string url = &quot;\&quot;www.webpagetest.org/result/&quot; +vars.get(&quot;testID&quot;)


//File file = new File(&quot;/home/glinius/gogno.txt&quot;); 

if (report.exists()) 
{ 

FileWriter fstream = new FileWriter(&quot;Report.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

 out.write( vars.get(&quot;ctestName&quot;)+ &quot;,&quot; +vars.get(&quot;dateTime&quot;)+ &quot;,&quot; +vars.get(&quot;loadTime&quot;) + &quot;,&quot;+vars.get(&quot;firstByte&quot;)+ &quot;,&quot; +vars.get(&quot;startRender&quot;) + &quot;,&quot; +vars.get(&quot;domElement&quot;)+ &quot;,&quot; + vars.get(&quot;docCompleteTime&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteRequest&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteBytesIn&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadTime&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadReq&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadBytesIn&quot;)+ &quot;,&quot; +vars.get(&quot;htmldetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;htmldetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g2&quot;)+ &quot;,&quot; + vars.get(&quot;Url&quot;)+ &quot;,&quot; + vars.get(&quot;browser&quot;)+ &quot;,&quot;+ &quot;\&quot;&quot; +vars.get(&quot;pageName&quot;)+ &quot;\&quot;&quot; + &quot;,&quot; +&quot;\&quot;&quot; +vars.get(&quot;locationName&quot;)+ &quot;\&quot;&quot; +&quot;,&quot;+vars.get(&quot;speedIndex&quot;)+&quot;,&quot; + vars.get(&quot;visuallyComplete&quot;)+&quot;,&quot;+vars.get(&quot;plabel&quot;) + &quot;,&quot; +&quot;\&quot;&quot; + vars.get(&quot;cvisualComp&quot;) + &quot;\&quot;&quot;);     
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
//test.append(&quot;,&quot;);
//vars.put(&quot;cvisualComp&quot;,test.toString());
}

else
{

FileWriter fstream = new FileWriter(&quot;Report.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

out.write(&quot;\&quot;TestName\&quot;,\&quot;TestDateTime\&quot;,\&quot;LoadTime\&quot;,\&quot;FirstByte\&quot;,\&quot;StartRender\&quot;,\&quot;DOMElement\&quot;,\&quot;DocumentCompleteTime\&quot;,\&quot;DocumentCompleteRequest\&quot;,\&quot;DocumentCompleteBytesIn\&quot;,\&quot;FullyLoadedTime\&quot;,\&quot;FullyLoadedRequests\&quot;,\&quot;FullyLoadedBytesIn\&quot;,\&quot;HmtlRequests\&quot;,\&quot;HtmlBytes\&quot;,\&quot;JsRequests\&quot;,\&quot;JsBytes\&quot;,\&quot;CssRequests\&quot;,\&quot;CssBytes\&quot;,\&quot;ImageRequests\&quot;,\&quot;ImagesBytes\&quot;,\&quot;TestResultURL\&quot;,\&quot;Browser\&quot;,\&quot;PageName\&quot;,\&quot;Location\&quot;,\&quot;SpeedIndex\&quot;,\&quot;VisuallyComplete\&quot;,\&quot;TransactionName\&quot;,\&quot;VisualComparison\&quot;&quot;+&quot;\n&quot;+vars.get(&quot;ctestName&quot;)+ &quot;,&quot; + vars.get(&quot;dateTime&quot;)+ &quot;,&quot;+vars.get(&quot;loadTime&quot;) + &quot;,&quot;+vars.get(&quot;firstByte&quot;)+ &quot;,&quot; +vars.get(&quot;startRender&quot;) + &quot;,&quot; +vars.get(&quot;domElement&quot;)+ &quot;,&quot; + vars.get(&quot;docCompleteTime&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteRequest&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteBytesIn&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadTime&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadReq&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadBytesIn&quot;)+  &quot;,&quot; +vars.get(&quot;htmldetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;htmldetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g2&quot;)+ &quot;,&quot; + vars.get(&quot;Url&quot;)+ &quot;,&quot; + vars.get(&quot;browser&quot;)+ &quot;,&quot;+ &quot;\&quot;&quot; +vars.get(&quot;pageName&quot;)+ &quot;\&quot;&quot; + &quot;,&quot; +&quot;\&quot;&quot; +vars.get(&quot;locationName&quot;)+&quot;\&quot;&quot; + &quot;,&quot;+vars.get(&quot;speedIndex&quot;)+&quot;,&quot; + vars.get(&quot;visuallyComplete&quot;)+&quot;,&quot;+vars.get(&quot;plabel&quot;)+ &quot;,&quot; + &quot;\&quot;&quot; + vars.get(&quot;cvisualComp&quot;) + &quot;\&quot;&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
//test.append(&quot;,&quot;);
//vars.put(&quot;cvisualComp&quot;,test.toString());
}
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="pTest" elementType="Argument">
                    <stringProp name="Argument.name">pTest</stringProp>
                    <stringProp name="Argument.value">${cvisualComp}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/video/compare.php?tests=${testID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cTime</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;thead&gt;(.+?)&lt;/thead&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cgoogleData</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;/a&gt;&lt;br&gt;(.+?)&lt;/td&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters">cgoogleData</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">StringBuilder test = new StringBuilder();
int count = Integer.parseInt(vars.get(&quot;cgoogleData_matchNr&quot;));
String testStr = vars.get(&quot;cTime&quot;);
         

 	for(i=1;i&lt;=count;i++)
		{
			String test3 = vars.get(&quot;cgoogleData_&quot;+i);
			vars.put(&quot;test2&quot;,test3);
			//test.append(vars.get(&quot;percentage&quot;));
			test.append(vars.get(&quot;test2&quot;));
			test.append(&quot;,&quot;);
		}

		vars.put(&quot;percentage&quot;,test.toString());


          testStr = testStr.replace(&quot;&lt;tr&gt;&lt;th&gt;&quot;,&quot;&quot;);
		testStr = testStr.replace(&quot;&lt;/th&gt;&lt;/tr&gt;&quot;,&quot;&quot;);
		testStr = testStr.replace(&quot;&lt;/th&gt;&lt;th&gt;&quot;,&quot;,&quot;);
		String[] testArray = testStr.split(&quot;,&quot;);
		
		
		vars.put(&quot;time&quot;, testStr);

  	File report = new File(&quot;Reports.csv&quot;);
	
//	if (report.exists()) 
//	{ 
	
		FileWriter fstream = new FileWriter(&quot;Reports.csv&quot;,true);
		BufferedWriter out = new BufferedWriter(fstream);
		out.write(vars.get(&quot;plabel&quot;)+ &quot;\n&quot;+ &quot;\&quot;LoadTime\&quot;&quot; + &quot;,&quot; + vars.get(&quot;time&quot;)+&quot;\n&quot;+ &quot;\&quot;LoadPercentage\&quot;&quot; + &quot;,&quot; + vars.get(&quot;percentage&quot;));     
		out.write(System.getProperty(&quot;line.separator&quot;));
		out.close();
		fstream.close();
	
//	}
	
/*	
 * 	else
	{
	
		FileWriter fstream = new FileWriter(&quot;Reports.csv&quot;,true);
		BufferedWriter out = new BufferedWriter(fstream);
		out.write(&quot;\&quot;LoadTime\&quot;&quot; + &quot;,&quot; + vars.get(&quot;time&quot;)+&quot;\n&quot;+&quot;\&quot;LoadPercentage\&quot;&quot; + &quot;,&quot; + vars.get(&quot;percentage&quot;));
		out.write(System.getProperty(&quot;line.separator&quot;));
		out.close();
		fstream.close();
	}
*/</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BaseResult" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/xmlResult/${testID}/?breakdown=1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ResultsDataExtraction" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ceventName</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;results&gt;[\s\S]*?&lt;\/results&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters">ceventName</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int test1= Integer.parseInt(vars.get(&quot;ceventName_matchNr&quot;)) + 1;
String test2 = Integer.toString(test1);
     vars.put(&quot;eventCount&quot;,test2);


         
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="clocationName" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">locationName</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;from&gt;(.+?)&amp;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cbrowser" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">browser</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;location&gt;${plocation}:(.+?)&lt;/location&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cSummaryurl" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">Url</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;summary&gt;(.+?)&lt;/summary&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="TestPlan.comments">	</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="BreakdownDataExtraction" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cbreakDown</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;breakdown&gt;[\s\S]*?&lt;\/breakdown&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Detailed_Results" enabled="true">
              <stringProp name="WhileController.condition">${__javaScript(&quot;${varEvent}&quot;!=&quot;${eventCount}&quot;)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                <stringProp name="ConstantTimer.delay">300</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EventName" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/xmlResult/${testID}/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ceventName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;results&gt;[\s\S]*?&lt;\/results&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">-1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters">ceventName</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">int eventCount = Integer.parseInt(vars.get(&quot;ceventName_matchNr&quot;));

         
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="updateEventID" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters">varEvent</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
//Result Data 
 String test3 = vars.get(&quot;ceventName_&quot;+vars.get(&quot;varEvent&quot;)+&quot;_g0&quot;);
String test4 = &quot;ceventName_&quot;+vars.get(&quot;varEvent&quot;)+&quot;_g0&quot;;
 vars.put(&quot;eventId&quot;,test3);
vars.put(&quot;eventId_1&quot;,test4);

//BreakDown Data
 String test7 = vars.get(&quot;cbreakDown_&quot;+vars.get(&quot;varBreakdown&quot;)+&quot;_g0&quot;);
String test8 = &quot;cbreakDown_&quot;+vars.get(&quot;varBreakdown&quot;)+&quot;_g0&quot;;
 vars.put(&quot;breakdownId&quot;,test7);
vars.put(&quot;breakdownId_1&quot;,test8);

/*
//Variable increment
int test5  = Integer.parseInt(vars.get(&quot;varEvent&quot;))+1;
//int test6 = test5 +1;
String test6 = Integer.toString(test5);
     vars.put(&quot;varEvent&quot;,test6);
     

 int test9  = Integer.parseInt(vars.get(&quot;varBreakdown&quot;))+2;
//int test6 = test5 +1;
String test10 = Integer.toString(test9);
     vars.put(&quot;varBreakdown&quot;,test10);
     */</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ctestUrl" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">testUrl</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;URL&gt;(.+?)&lt;/URL&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cloadTime" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">loadTime</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;loadTime&gt;(.+?)&lt;/loadTime&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfirstByte" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">firstByte</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;TTFB&gt;(.+?)&lt;/TTFB&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cstartRender" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">startRender</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;render&gt;(.+?)&lt;/render&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdocCompleteTime" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">docCompleteTime</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;docTime&gt;(.+?)&lt;/docTime&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdocCompleteRequest" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">docCompleteRequest</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;requestsDoc&gt;(.+?)&lt;/requestsDoc&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdocCompleteBytesIn" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">docCompleteBytesIn</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bytesInDoc&gt;(.+?)&lt;/bytesInDoc&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfullyLoadTime" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">fullyLoadTime</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;fullyLoaded&gt;(.+?)&lt;/fullyLoaded&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfullyLoadReq" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">fullyLoadReq</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;requestsFull&gt;(.+?)&lt;/requestsFull&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cfullyLoadBytesIn" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">fullyLoadBytesIn</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;bytesIn&gt;(.+?)&lt;/bytesIn&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cpageName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">pageName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;title&gt;(.+?)&lt;/title&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cspeedIndex" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">speedIndex</stringProp>
                  <stringProp name="RegexExtractor.regex">SpeedIndex&gt;(.+?)&lt;/SpeedIndex&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cvisuallyComplete" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">visuallyComplete</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;visualComplete&gt;(.+?)&lt;/visualComplete&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdomElement" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">domElement</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;domElements&gt;(.+?)&lt;/domElements&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdomInteractive" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">domInteractive</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;domInteractive&gt;(.+?)&lt;/domInteractive&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ctransactionName" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">transactionName</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;eventName&gt;(.+?)&lt;/eventName&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="clastVisuallyChanged" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">lastVisuallyChanged</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;lastVisualChange&gt;(.+?)&lt;/lastVisualChange&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cacheScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cacheScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_cache&gt;(.+?)&lt;/score_cache&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cdnScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cdnScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_cdn&gt;(.+?)&lt;/score_cdn&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="gzipScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">gzipScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_gzip&gt;(.+?)&lt;/score_gzip&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cookiesScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cookiesScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_cookies&gt;(.+?)&lt;/score_cookies&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="minifyScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">minifyScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_minify&gt;(.+?)&lt;/score_minify&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="keepAliveScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">keepAliveScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_keep-alive&gt;(.+?)&lt;/score_keep-alive&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="combineScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">combineScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_combine&gt;(.+?)&lt;/score_combine&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="compressScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">compressScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_compress&gt;(.+?)&lt;/score_compress&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="etagsScore" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">etagsScore</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;score_etags&gt;(.+?)&lt;/score_etags&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="chtmldetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">htmldetails</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;html&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                  <stringProp name="RegexExtractor.default">not found</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">breakdownId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cjsdetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">jsdetails</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;js&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                  <stringProp name="RegexExtractor.default">not found</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">breakdownId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cCssdetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">cssdetails</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;css&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                  <stringProp name="RegexExtractor.default">not found</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">breakdownId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="cimagedetails" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">imagedetails</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;image&gt;[\s\S]&lt;requests&gt;(.*?)&lt;/requests&gt;[\s\S]&lt;bytes&gt;(.*?)&lt;/bytes&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
                  <stringProp name="RegexExtractor.default">not found</stringProp>
                  <stringProp name="RegexExtractor.match_number"></stringProp>
                  <stringProp name="Sample.scope">variable</stringProp>
                  <stringProp name="Scope.variable">breakdownId</stringProp>
                </RegexExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CSVCreation" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
String test = &quot;https://www.webpagetest.org/video/compare.php?tests=&quot; + vars.get(&quot;testID&quot;) + &quot;-r:1-c:0-s:&quot; + vars.get(&quot;varEvent&quot;);

vars.put(&quot;cvisualComp&quot;,test);

String test1 = vars.get(&quot;testname&quot;);
vars.put(&quot;ctestName&quot;,test1);

//StringBuilder test = new StringBuilder();
//test.append(vars.get(&quot;cvisualComp&quot;));
//test.append(vars.get(&quot;testID&quot;));
//vars.put(&quot;cvisualComp&quot;,test.toString());



File report = new File(&quot;Report.csv&quot;);

//string url = &quot;\&quot;www.webpagetest.org/result/&quot; +vars.get(&quot;testID&quot;)


//File file = new File(&quot;/home/glinius/gogno.txt&quot;); 

if (report.exists()) 
{ 

FileWriter fstream = new FileWriter(&quot;Report.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

 out.write( vars.get(&quot;ctestName&quot;)+ &quot;,&quot; +vars.get(&quot;dateTime&quot;)+ &quot;,&quot; +vars.get(&quot;loadTime&quot;) + &quot;,&quot;+vars.get(&quot;firstByte&quot;)+ &quot;,&quot; +vars.get(&quot;startRender&quot;) + &quot;,&quot; +vars.get(&quot;domElement&quot;)+ &quot;,&quot; +vars.get(&quot;domInteractive&quot;)+ &quot;,&quot; + vars.get(&quot;docCompleteTime&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteRequest&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteBytesIn&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadTime&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadReq&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadBytesIn&quot;)+ &quot;,&quot; +vars.get(&quot;htmldetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;htmldetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g2&quot;)+ &quot;,&quot; + vars.get(&quot;Url&quot;)+ &quot;,&quot; + vars.get(&quot;browser&quot;)+ &quot;,&quot;+ &quot;\&quot;&quot; +vars.get(&quot;pageName&quot;)+ &quot;\&quot;&quot; + &quot;,&quot; +&quot;\&quot;&quot; +vars.get(&quot;locationName&quot;)+ &quot;\&quot;&quot; +&quot;,&quot;+vars.get(&quot;speedIndex&quot;)+&quot;,&quot; + vars.get(&quot;visuallyComplete&quot;)+&quot;,&quot;+vars.get(&quot;transactionName&quot;) + &quot;,&quot; +&quot;\&quot;&quot; + vars.get(&quot;cvisualComp&quot;) + &quot;\&quot;&quot;+ &quot;,&quot; +vars.get(&quot;cacheScore&quot;)+&quot;,&quot; +vars.get(&quot;cdnScore&quot;)+&quot;,&quot; +vars.get(&quot;gzipScore&quot;)+&quot;,&quot; +vars.get(&quot;cookiesScore&quot;)+&quot;,&quot; +vars.get(&quot;keepAliveScore&quot;)+&quot;,&quot; +vars.get(&quot;minifyScore&quot;)+&quot;,&quot; +vars.get(&quot;combineScore&quot;)+&quot;,&quot; +vars.get(&quot;compressScore&quot;)+&quot;,&quot; +vars.get(&quot;etagsScore&quot;));     
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
//test.append(&quot;,&quot;);
//vars.put(&quot;cvisualComp&quot;,test.toString());
}

else
{

FileWriter fstream = new FileWriter(&quot;Report.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);

out.write(&quot;\&quot;TestName\&quot;,\&quot;TestDateTime\&quot;,\&quot;LoadTime\&quot;,\&quot;FirstByte\&quot;,\&quot;StartRender\&quot;,\&quot;DOMElement\&quot;,\&quot;DOMInteractive\&quot;,\&quot;DocumentCompleteTime\&quot;,\&quot;DocumentCompleteRequest\&quot;,\&quot;DocumentCompleteBytesIn\&quot;,\&quot;FullyLoadedTime\&quot;,\&quot;FullyLoadedRequests\&quot;,\&quot;FullyLoadedBytesIn\&quot;,\&quot;HmtlRequests\&quot;,\&quot;HtmlBytes\&quot;,\&quot;JsRequests\&quot;,\&quot;JsBytes\&quot;,\&quot;CssRequests\&quot;,\&quot;CssBytes\&quot;,\&quot;ImageRequests\&quot;,\&quot;ImagesBytes\&quot;,\&quot;TestResultURL\&quot;,\&quot;Browser\&quot;,\&quot;PageName\&quot;,\&quot;Location\&quot;,\&quot;SpeedIndex\&quot;,\&quot;VisuallyComplete\&quot;,\&quot;TransactionName\&quot;,\&quot;VisualComparison\&quot;,\&quot;CacheScore\&quot;,\&quot;cdnScore\&quot;,\&quot;gzipScore\&quot;,\&quot;cookiesScore\&quot;,\&quot;keepAliveScore\&quot;,\&quot;minfyScore\&quot;,\&quot;combineScore\&quot;,\&quot;compressScore\&quot;,\&quot;etagsScore\&quot;&quot;+&quot;\n&quot;+vars.get(&quot;ctestName&quot;)+ &quot;,&quot; + vars.get(&quot;dateTime&quot;)+ &quot;,&quot;+vars.get(&quot;loadTime&quot;) + &quot;,&quot;+vars.get(&quot;firstByte&quot;)+ &quot;,&quot; +vars.get(&quot;startRender&quot;) + &quot;,&quot; +vars.get(&quot;domElement&quot;)+ &quot;,&quot; +vars.get(&quot;domInteractive&quot;)+ &quot;,&quot; + vars.get(&quot;docCompleteTime&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteRequest&quot;)+ &quot;,&quot; +vars.get(&quot;docCompleteBytesIn&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadTime&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadReq&quot;)+ &quot;,&quot; +vars.get(&quot;fullyLoadBytesIn&quot;)+  &quot;,&quot; +vars.get(&quot;htmldetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;htmldetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;jsdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;cssdetails_g2&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g1&quot;)+ &quot;,&quot; +vars.get(&quot;imagedetails_g2&quot;)+ &quot;,&quot; + vars.get(&quot;Url&quot;)+ &quot;,&quot; + vars.get(&quot;browser&quot;)+ &quot;,&quot;+ &quot;\&quot;&quot; +vars.get(&quot;pageName&quot;)+ &quot;\&quot;&quot; + &quot;,&quot; +&quot;\&quot;&quot; +vars.get(&quot;locationName&quot;)+&quot;\&quot;&quot; + &quot;,&quot;+vars.get(&quot;speedIndex&quot;)+&quot;,&quot; + vars.get(&quot;visuallyComplete&quot;)+&quot;,&quot;+vars.get(&quot;transactionName&quot;)+ &quot;,&quot; + &quot;\&quot;&quot; + vars.get(&quot;cvisualComp&quot;) + &quot;\&quot;&quot;+ &quot;,&quot; +vars.get(&quot;cacheScore&quot;)+&quot;,&quot; +vars.get(&quot;cdnScore&quot;)+&quot;,&quot; +vars.get(&quot;gzipScore&quot;)+&quot;,&quot; +vars.get(&quot;cookiesScore&quot;)+&quot;,&quot; +vars.get(&quot;keepAliveScore&quot;)+&quot;,&quot; +vars.get(&quot;minifyScore&quot;)+&quot;,&quot; +vars.get(&quot;combineScore&quot;)+&quot;,&quot; +vars.get(&quot;compressScore&quot;)+&quot;,&quot; +vars.get(&quot;etagsScore&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
//test.append(&quot;,&quot;);
//vars.put(&quot;cvisualComp&quot;,test.toString());
}
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="increamentVarEventAndBreadkdown" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters">varEvent</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//Variable increment
int test5  = Integer.parseInt(vars.get(&quot;varEvent&quot;))+1;
//int test6 = test5 +1;
String test6 = Integer.toString(test5);
     vars.put(&quot;varEvent&quot;,test6);
     

 int test9  = Integer.parseInt(vars.get(&quot;varBreakdown&quot;))+2;
//int test6 = test5 +1;
String test10 = Integer.toString(test9);
     vars.put(&quot;varBreakdown&quot;,test10);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/result/${testID}/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">resulturl</stringProp>
                <stringProp name="RegexExtractor.regex">Raw page data&lt;/a&gt; - &lt;a href=&quot;(.*?)&quot;&gt;Raw object data</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ResultDownload" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/result/${testID}/${resulturl}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
                <stringProp name="FileSaver.filename">Raw_Object_Data_</stringProp>
                <boolProp name="FileSaver.errorsonly">false</boolProp>
                <boolProp name="FileSaver.skipautonumber">false</boolProp>
                <boolProp name="FileSaver.skipsuffix">false</boolProp>
                <boolProp name="FileSaver.successonly">false</boolProp>
                <boolProp name="FileSaver.addTimstamp">true</boolProp>
              </ResultSaver>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EventName" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">www.webpagetest.org</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/xmlResult/170508_HF_MWW/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">ceventName</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;results&gt;[\s\S]*?&lt;\/results&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters">ceventName</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int eventCount = Integer.parseInt(vars.get(&quot;ceventName_matchNr&quot;));

         
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1491286568000</longProp>
        <longProp name="ThreadGroup.end_time">1491286568000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">report.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">,,,,,,,,,,,,,,,,pVisual</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="false">
          <stringProp name="ForeachController.inputVal">cgoogleData</stringProp>
          <stringProp name="ForeachController.returnVal">test1</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
          <stringProp name="ForeachController.endIndex">${cgoogleData_matchNr}</stringProp>
        </ForeachController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
            <stringProp name="BeanShellSampler.query">StringBuilder test = new StringBuilder();
test.append(vars.get(&quot;percentage&quot;));
test.append(vars.get(&quot;test1&quot;));
test.append(&quot;,&quot;);
vars.put(&quot;percentage&quot;,test.toString());</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">String testStr = vars.get(&quot;cTime&quot;);

/*&quot;&lt;tr&gt;&lt;th&gt;0.0s&lt;/th&gt;&lt;th&gt;0.5s&lt;/th&gt;&lt;th&gt;1.0s&lt;/th&gt;&lt;th&gt;1.5s&lt;/th&gt;&lt;th&gt;2.0s&lt;/th&gt;&lt;th&gt;2.5s&lt;/th&gt;&lt;th&gt;3.0s&lt;/th&gt;&lt;th&gt;3.5s&lt;/th&gt;&lt;th&gt;4.0s&lt;/th&gt;&lt;th&gt;4.5s&lt;/th&gt;&lt;th&gt;5.0s&lt;/th&gt;&lt;th&gt;5.5s&lt;/th&gt;&lt;th&gt;6.0s&lt;/th&gt;&lt;th&gt;6.5s&lt;/th&gt;&lt;th&gt;7.0s&lt;/th&gt;&lt;th&gt;7.5s&lt;/th&gt;&lt;th&gt;8.0s&lt;/th&gt;&lt;th&gt;8.5s&lt;/th&gt;&lt;th&gt;9.0s&lt;/th&gt;&lt;th&gt;9.5s&lt;/th&gt;&lt;th&gt;10.0s&lt;/th&gt;&lt;th&gt;10.5s&lt;/th&gt;&lt;th&gt;11.0s&lt;/th&gt;&lt;th&gt;11.5s&lt;/th&gt;&lt;th&gt;12.0s&lt;/th&gt;&lt;th&gt;12.5s&lt;/th&gt;&lt;th&gt;13.0s&lt;/th&gt;&lt;th&gt;13.5s&lt;/th&gt;&lt;th&gt;14.0s&lt;/th&gt;&lt;th&gt;14.5s&lt;/th&gt;&lt;th&gt;15.0s&lt;/th&gt;&lt;th&gt;15.5s&lt;/th&gt;&lt;/tr&gt;&quot;*/
		testStr = testStr.replace(&quot;&lt;tr&gt;&lt;th&gt;&quot;,&quot;&quot;);
		testStr = testStr.replace(&quot;&lt;/th&gt;&lt;/tr&gt;&quot;,&quot;&quot;);
		testStr = testStr.replace(&quot;&lt;/th&gt;&lt;th&gt;&quot;,&quot;,&quot;);
		String[] testArray = testStr.split(&quot;,&quot;);
		//System.out.println(testArray[0]);

vars.put(&quot;time&quot;, testStr);


File report = new File(&quot;Reports.csv&quot;);

//string url = &quot;\&quot;www.webpagetest.org/result/&quot; +vars.get(&quot;testID&quot;)


//File file = new File(&quot;/home/glinius/gogno.txt&quot;); 

if (report.exists()) 
{ 

FileWriter fstream = new FileWriter(&quot;Reports.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(vars.get(&quot;plabel&quot;)+ &quot;\n&quot;+ &quot;\&quot;LoadTime\&quot;&quot; + &quot;,&quot; + vars.get(&quot;time&quot;)+&quot;\n&quot;+&quot;\&quot;LoadPercentage\&quot;&quot; + &quot;,&quot; + vars.get(&quot;percentage&quot;));     
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();

}

else
{

FileWriter fstream = new FileWriter(&quot;Reports.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;\&quot;LoadTime\&quot;&quot; + &quot;,&quot; + vars.get(&quot;time&quot;)+&quot;\n&quot;+&quot;\&quot;LoadPercentage\&quot;&quot; + &quot;,&quot; + vars.get(&quot;percentage&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
}








//String testStr = vars.get(&quot;cTime&quot;);

/*&quot;&lt;tr&gt;&lt;th&gt;0.0s&lt;/th&gt;&lt;th&gt;0.5s&lt;/th&gt;&lt;th&gt;1.0s&lt;/th&gt;&lt;th&gt;1.5s&lt;/th&gt;&lt;th&gt;2.0s&lt;/th&gt;&lt;th&gt;2.5s&lt;/th&gt;&lt;th&gt;3.0s&lt;/th&gt;&lt;th&gt;3.5s&lt;/th&gt;&lt;th&gt;4.0s&lt;/th&gt;&lt;th&gt;4.5s&lt;/th&gt;&lt;th&gt;5.0s&lt;/th&gt;&lt;th&gt;5.5s&lt;/th&gt;&lt;th&gt;6.0s&lt;/th&gt;&lt;th&gt;6.5s&lt;/th&gt;&lt;th&gt;7.0s&lt;/th&gt;&lt;th&gt;7.5s&lt;/th&gt;&lt;th&gt;8.0s&lt;/th&gt;&lt;th&gt;8.5s&lt;/th&gt;&lt;th&gt;9.0s&lt;/th&gt;&lt;th&gt;9.5s&lt;/th&gt;&lt;th&gt;10.0s&lt;/th&gt;&lt;th&gt;10.5s&lt;/th&gt;&lt;th&gt;11.0s&lt;/th&gt;&lt;th&gt;11.5s&lt;/th&gt;&lt;th&gt;12.0s&lt;/th&gt;&lt;th&gt;12.5s&lt;/th&gt;&lt;th&gt;13.0s&lt;/th&gt;&lt;th&gt;13.5s&lt;/th&gt;&lt;th&gt;14.0s&lt;/th&gt;&lt;th&gt;14.5s&lt;/th&gt;&lt;th&gt;15.0s&lt;/th&gt;&lt;th&gt;15.5s&lt;/th&gt;&lt;/tr&gt;&quot;*/
//		testStr = testStr.replace(&quot;&lt;tr&gt;&lt;th&gt;&quot;,&quot;&quot;);
//		testStr = testStr.replace(&quot;&lt;/th&gt;&lt;/tr&gt;&quot;,&quot;&quot;);
//		testStr = testStr.replace(&quot;&lt;/th&gt;&lt;th&gt;&quot;,&quot;,&quot;);
//		String[] testArray = testStr.split(&quot;,&quot;);
//		System.out.println(testArray[0]);

//vars.put(&quot;time&quot;, testStr);


//import org.apache.commons.lang3.StringUtils;

//String s = &quot;7,4,423213,43&quot;;
//String[] myStringArray = new String[];

//myStringArray = s.split(&quot;,&quot;);



//String str;
//String[] vTime;

//str = vars.get(&quot;cTime&quot;);


//vTime = StringUtils.substringBetween(vars.get(&quot;cTime&quot;),&quot;&lt;th&gt;&quot;,&quot;&lt;/th&gt;&quot;);

//time = vTime[1];

//vars.put(&quot;time&quot;, myStringArray[1]);</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
